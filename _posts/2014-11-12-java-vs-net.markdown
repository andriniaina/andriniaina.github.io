---
layout: post
categories: EN dotnet
title: Things .NET can do that java can't
---

A few years ago, I left the java in favor of .net in my job.  I started using java again recently for a project and it reminded me why java was so behind and counter-productive.

Here is a list of what java does wrong (or does not do at all) that I now miss:



Productive code
==============================

**Generics**
:  Yes I know, java has generics since 2004. But it's commonly admitted that it's a broken implementation. Java does not have:

    - Runtime generics (create a type-safe generic class by reflection)
    - Generics of primitive types

**Generics**
: Did I mention runtime generics? (think injection frameworks).

**Closures**
: Retain bound variables and pass them around.

**Extension methods**
: Decorator pattern out-of-the-box. Of course it's not the full decorator pattern because these are static classes that you cannot replace at runtime. However, it covers 90% of all my use-cases.

**Inner classes**
: as opposed to nested classes.

**Iterators and `yield`**
: Implement a true iterable/iterator in a few lines of code instead of storing everything in a temporary array/list.

**Nullable primitives**
: &nbsp;

**A solid foundation**
: a.k.a. "open" source gone wrong: Why are there N buggy implementations of the same damn feature in the java world? Work together and provide a single working  implementation of the core features and the runtime!
    Also, notice the quotes around "open".

**A good documentation**
: a.k.a. open source gone wrong again: java could learn a lot from MSDN (even 2008 msdn).

**Partial classes**
: Mix autogenerated code and user code.

Clean code
==============================

**Delegates**
: Strategy Pattern out-of-the-box, in a single line of code, without anonymous classes.

**Events**
: Observable pattern out-of-the-box, listeners, in a single line of code, without anonymous classes.

**Operator overloading, Indexers**
:  &nbsp;

**Type inference**
: `var i = new MyClass()`

**Properties**
: Unless you like useless parentheses, writing `display(x.MyProp)` and `x.MyProp = 1` is so much readable than `display(x.getMyProp())` or `x.setMyProp(1)`

**Auto-implemented properties**
: Removes code clutter. Make code more readable. Compare this single line `public string Name { get; set; }` to its equivalent in java.


**LINQ language, and expression trees**
: Brings type-safe queries directly to the core language.

**Dynamic types**
: Love it or not, admit that it's quite useful sometimes to avoid excessive casting (especially when dealing with complex COM objects).




<hr />

And now, a (short) list of what java does better:

**Virtual methods by default**
: This is basically the only thing I miss on .Net

**Cross-platform**
:   Yes. I know. There is [Mono](http://www.mono-project.com/) and [Xamarin](http://xamarin.com/). But we are still waiting for a cross-platform runtime from Microsoft (should come in 2015).

> A good part of .Net is now open-source [.NET Core open source](http://blogs.msdn.com/b/dotnet/archive/2014/11/12/net-core-is-open-source.aspx?amp&amp), Roslyn (compiler api and tools), F# (fully open-source), asp.NET 5 (vNext), Entity Framework, ...


<hr />

Other features that I don't miss in C#:

**Checked exceptions**
: Controversial. Language honesty is therotically a good thing but in this case I observed that many devs (including me sometimes) end up writing:


```java
    public void m() throws Exception {}
```

or

```java
    try {
        doSomethingWrong();
    } catch(Exception ex) {
        /* just log the error, do nothing at all that contributes to honesty */
    }
```
